1. npm init

2. npm i express --save


------------ Express VS. Node --------------

 - Node is "JavaScript runtime used to execute code outside of the browser.

 - Express is "Library that runs in the Node runtime.
    It has helpers to make dealing with HTTP traffic easier.


================== Heroku Deployment ==============================
// ----------------------Configuration for deploying Heroku -----------------------------

// 1) Dynamic Port Deployment for Heroku
//      Whenever Heroku runs the application,
//          it injects "env" variable.
//      "env" is running underline of node
//          then it passes us to runtime configuration
//          for the application's execution.
//      Heroku decides and passes on the port after
//          the configuration is done and just before
//          the application starts its execution.
// It is a format of the production "env"
// const PORT = process.env.PORT;

// Development environment,
//      We use it down below.
// That is, it it is not the production environment,
//      use "5000".
At the bottom of the code
"
const PORT  = process.env.PORT || 5000;
app.listen(PORT);"

// 2) Specify Node Environment
//  Put the version into package.json, 
//      at the below of "main" : "index.js"
//  node -v : 8.9.4
//  npm -v : 5.6.0
//  "engines" : {
//      "node" : "8.9.4",
//      "npm" : "5.6.0"
//  },

// 3) Specify start script
//      Tell Heroku how it should start up the server.
//    Find "scripts" : {} in package.json.
//    Delete "test" : ~~~~~
//    Then put "start" : "node index.js" at the spot.

// 4) Make .gitignore
//      Therefore, Heroku does not find dependency on
//      "node_modules/" that includes many unnecessary
//      and duplicated modules with package.json.
//      Heroku should refer to package.json for the dependancy.


// ----------------- Herok Deployment CheckList ------------------

// 1) Heroku Account => Done.

// 2) Commit our codebase to git
    // git init
    // git add .
    // git commit -m "initial commit"

// 3) Install Heroku CLI and Create App
//     Visit : https://devcenter.heroku.com/articles/heroku-cli
//     install WindowVersion CLI at https://devcenter.heroku.com/articles/heroku-cli#download-and-install
//     In bash terminal,
//     "heroku -v"    

// 4) Create App
//      "heroku login" (when it is the first time)
//      "heroku create" (create a new app) 

//      The first url: https://calm-cove-22171.herokuapp.com/ => the name of the identification 
//      The other url: https://git.heroku.com/calm-cove-22171.git => target Deployment
//          => It is a Heroku's git repository to be associated with the local seerver. 

//      By using the second url, 
//          " git remote add heroku https://git.heroku.com/calm-cove-22171.git "
//      Then, 
//      "git push heroku master"

//      Finally, run Herok
//      "heroku open"

//      FYI, to fix any issue, "heroku logs"

//  -----------------Subsequent Deploys-----------------------

//  1) Commit codebase with git (Whenever we edit the codes)
        - git status (check the modified files or folders)
        - git add .
        - git commit
        - git push heroku master

//


// ------------------------- Passport.JS -----------------------

1. website: http://www.passportjs.org/  

2. setup
 1) basic passport : npm i --save passport

 2) google strategies : npm i --save passport-google-oauth20



// ------------------------- Sign up with Google Auth ------------------

1. Create new project at Google
    1) visit : console.develpers.google.com
    2) click the drop bar next to "Google API" log at the upper left corner.
    3) Then click "+" symbole.

2. Enable Oauth API
    1) Find and click Enable API and Services in blue.
    2) Search on "google+ api" and then click it.
    3) Then, click "Enable" in blue at the top.
    4) Click the "credential" at the left of the menu bar.
    5) Click the "create credential" and select "oauth id"
    6) Then click the blue button "configure conscent screen"
        FYI, "conscent" here to make Google to grant permission.
    7) Fill out the "Product Name shown to users" with "customer-survey"
       Then, save it.
    8) Check "Web Application" and Fill out "Authorized Javascript Origin"
       with "http://localhost:5000" and "Authorized redirect URLs" with "http://localhost:5000/*"
       Then click "Create"
    9) It will populate "Client ID" and "Client Secret"
    
====Redirect URL Setup ==============================================================
400 Error in the first request from the user to Google Auth Server,
We will face "Error: redirect_uri_mismatch" error

/*
https://accounts.google.com/o/oauth2/v2/auth? // => query string
response_type=code& // => asking for the code 

//*****
// It is same as defined in Strategy :  callbackURL : '/auth/google/callback'
// The reason that Google does not grant auth to this URL at first
//      is becaue it can be displaced with the malicious URL created by hackers.
// It can be changed hacker's URL and then can be a space to receive customer profile
//      Google would provide.
// In order to prevent the swtich by hacker, it needs to get another auth from Google.
redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Fauth%2Fgoogle%2Fcallback&

scope=profile%20email& // => We are sending...

// => clientID 
client_id=351399471671-5hc1bhvbt3955volvo1kctvo8bv1omba.apps.googleusercontent.com

1. Visit URL Google provides at the error page.
2. Find "Authorized redirect URIs"
3. Change "http://localhost:5000/*" => "http://localhost:5000/auth/google/callback" defined
    at Strategy in "index.js"

    ===> Then visit the route again.
         We will see the redirect URL and also "code" Google gives us in the URL bar.


*/

========== nodemon install ================
1. setup: npm install --save nodemon

2. input in package.json, at the below of "start"
   "dev": "nodemon index.js"
   To run : npm run dev

============ MongoDB Install ==================

1. go to mLab and signup
2. Log in mLab.
3. Click "create new"
4. Select "SandBox" for free and click "continue".
5. Select region "US East" which is the closest region from Toronto.
   Then click "Continue"
6. Input database name "customer-survey" and click "continue"
7. "Submit Order"
8. Click the project we created. => "A database user is required to connect to this database. To create one now, visit the 'Users' tab and click the 'Add database user' button."
   We need to setup "administrative user" to the database.
   Click "Users" tab and "add database user"
   Then, input user by creating user name and passwd. (joon, 1111)

================== mongoose installation ====================
1. setup: npm install mongoose --save


============================= Making cookie at inde.jx ===================
setup: npm i --save cookie-session
